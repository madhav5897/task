{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CrudService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.apiServer = \"http://localhost:3000\";\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  create(EmployeeModel) {\n    return this.httpClient.post(this.apiServer + '/EmployeeModels/', JSON.stringify(EmployeeModel), this.httpOptions).pipe(catchError(this.errorHandler));\n  }\n  getById(id) {\n    return this.httpClient.get(this.apiServer + '/Employees/' + id).pipe(catchError(this.errorHandler));\n  }\n  getAll() {\n    return this.httpClient.get(this.apiServer + '/Employees/').pipe(catchError(this.errorHandler));\n  }\n  update(id, EmployeeModel) {\n    return this.httpClient.put(this.apiServer + '/Employees/' + id, JSON.stringify(EmployeeModel), this.httpOptions).pipe(catchError(this.errorHandler));\n  }\n  delete(id) {\n    return this.httpClient.delete(this.apiServer + '/Employees/' + id, this.httpOptions).pipe(catchError(this.errorHandler));\n  }\n  errorHandler(error) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Get client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Get server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    console.log(errorMessage);\n    return throwError(errorMessage);\n  }\n}\nCrudService.ɵfac = function CrudService_Factory(t) {\n  return new (t || CrudService)(i0.ɵɵinject(i1.HttpClient));\n};\nCrudService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CrudService,\n  factory: CrudService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAwCA,WAAW,QAAQ,sBAAsB;AAEjF,SAAUC,UAAU,QAAQ,MAAM;AAClC,SAASC,UAAU,QAAQ,gBAAgB;;;AAO3C,OAAM,MAAOC,WAAW;EAQtBC,YAAoBC,UAAsB;IAAtB,eAAU,GAAVA,UAAU;IANtB,cAAS,GAAG,uBAAuB;IAC3C,gBAAW,GAAG;MACZC,OAAO,EAAE,IAAIN,WAAW,CAAC;QACvB,cAAc,EAAE;OACjB;KACF;EAC6C;EAE9CO,MAAM,CAACC,aAAiB;IACtB,OAAO,IAAI,CAACH,UAAU,CAACI,IAAI,CAAgB,IAAI,CAACC,SAAS,GAAG,kBAAkB,EAAEC,IAAI,CAACC,SAAS,CAACJ,aAAa,CAAC,EAAE,IAAI,CAACK,WAAW,CAAC,CAC/HC,IAAI,CACHZ,UAAU,CAAC,IAAI,CAACa,YAAY,CAAC,CAC9B;EACH;EAGAC,OAAO,CAACC,EAAM;IACZ,OAAO,IAAI,CAACZ,UAAU,CAACa,GAAG,CAAgB,IAAI,CAACR,SAAS,GAAG,aAAa,GAAGO,EAAE,CAAC,CAC7EH,IAAI,CACHZ,UAAU,CAAC,IAAI,CAACa,YAAY,CAAC,CAC9B;EACH;EAEAI,MAAM;IACJ,OAAO,IAAI,CAACd,UAAU,CAACa,GAAG,CAAkB,IAAI,CAACR,SAAS,GAAG,aAAa,CAAC,CAC1EI,IAAI,CACHZ,UAAU,CAAC,IAAI,CAACa,YAAY,CAAC,CAC9B;EACH;EAEAK,MAAM,CAACH,EAAM,EAAET,aAAa;IAC1B,OAAO,IAAI,CAACH,UAAU,CAACgB,GAAG,CAAgB,IAAI,CAACX,SAAS,GAAG,aAAa,GAAGO,EAAE,EAAEN,IAAI,CAACC,SAAS,CAACJ,aAAa,CAAC,EAAE,IAAI,CAACK,WAAW,CAAC,CAC9HC,IAAI,CACHZ,UAAU,CAAC,IAAI,CAACa,YAAY,CAAC,CAC9B;EACH;EAEAO,MAAM,CAACL,EAAE;IACP,OAAO,IAAI,CAACZ,UAAU,CAACiB,MAAM,CAAgB,IAAI,CAACZ,SAAS,GAAG,aAAa,GAAGO,EAAE,EAAE,IAAI,CAACJ,WAAW,CAAC,CAClGC,IAAI,CACHZ,UAAU,CAAC,IAAI,CAACa,YAAY,CAAC,CAC9B;EACH;EACAA,YAAY,CAACQ,KAAK;IACf,IAAIC,YAAY,GAAG,EAAE;IACrB,IAAGD,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;MACpC;MACAD,YAAY,GAAGD,KAAK,CAACA,KAAK,CAACG,OAAO;KACnC,MAAM;MACL;MACAF,YAAY,GAAG,eAAeD,KAAK,CAACI,MAAM,cAAcJ,KAAK,CAACG,OAAO,EAAE;;IAEzEE,OAAO,CAACC,GAAG,CAACL,YAAY,CAAC;IACzB,OAAOvB,UAAU,CAACuB,YAAY,CAAC;EAClC;;AAxDWrB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA2B,SAAX3B,WAAW;EAAA4B,YAFV;AAAM","names":["HttpHeaders","throwError","catchError","CrudService","constructor","httpClient","headers","create","EmployeeModel","post","apiServer","JSON","stringify","httpOptions","pipe","errorHandler","getById","id","get","getAll","update","put","delete","error","errorMessage","ErrorEvent","message","status","console","log","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\HP\\Desktop\\madhav\\angular project\\myapp\\src\\app\\crud.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from \"@angular/common/http\";\n\nimport {  throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { EmployeeModel } from './employee-model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CrudService {\n\n  private apiServer = \"http://localhost:3000\";\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  }\n  constructor(private httpClient: HttpClient) { }\n\n  create(EmployeeModel:any) {\n    return this.httpClient.post<EmployeeModel>(this.apiServer + '/EmployeeModels/', JSON.stringify(EmployeeModel), this.httpOptions)\n    .pipe(\n      catchError(this.errorHandler)\n    )\n  }  \n\n\n  getById(id:any){\n    return this.httpClient.get<EmployeeModel>(this.apiServer + '/Employees/' + id)\n    .pipe(\n      catchError(this.errorHandler)\n    )\n  }\n\n  getAll(){\n    return this.httpClient.get<EmployeeModel[]>(this.apiServer + '/Employees/')\n    .pipe(\n      catchError(this.errorHandler)\n    )\n  }\n\n  update(id:any, EmployeeModel){\n    return this.httpClient.put<EmployeeModel>(this.apiServer + '/Employees/' + id, JSON.stringify(EmployeeModel), this.httpOptions)\n    .pipe(\n      catchError(this.errorHandler)\n    )\n  }\n\n  delete(id){\n    return this.httpClient.delete<EmployeeModel>(this.apiServer + '/Employees/' + id, this.httpOptions)\n    .pipe(\n      catchError(this.errorHandler)\n    )\n  }\n  errorHandler(error) {\n     let errorMessage = '';\n     if(error.error instanceof ErrorEvent) {\n       // Get client-side error\n       errorMessage = error.error.message;\n     } else {\n       // Get server-side error\n       errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n     }\n     console.log(errorMessage);\n     return throwError(errorMessage);\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}